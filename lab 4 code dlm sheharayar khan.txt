task1:
for relu:
print("SHEHARYAR KHAN / 175/ LAB:4 TASK: 1 ")
# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Step 2: Load the dataset
df = pd.read_csv("players_selection.csv")
print(df.head())

# Step 3: Split dataset into features (X) and target (y)
X = df[['goals', 'fitness_level']].values
y = df['selected'].values

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build the model (Single Layer Perceptron)
model = Sequential()
model.add(Dense(1, input_dim=2, activation='relu'))  # Changed activation to 'relu'

# Step 6: Compile the model
model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.01),
    loss='binary_crossentropy',
    metrics=['accuracy']
)
# Step 7: Train the model
model.fit(X_train, y_train, epochs=100, verbose=1)

# Step 8: Evaluate model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")
-------------------------------------------------------------------------------------------------------------------------------------
task1:
for sigmoid 
print("SHEHARYAR KHAN / 175/ LAB:4 TASK: 1 ")
# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Step 2: Load the dataset
df = pd.read_csv("players_selection.csv")
print(df.head())

# Step 3: Split dataset into features (X) and target (y)
X = df[['goals', 'fitness_level']].values
y = df['selected'].values

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build the model (Single Layer Perceptron)
model = Sequential()
model.add(Dense(1, input_dim=2, activation='sigmoid'))  # Changed activation to 'relu'

# Step 6: Compile the model
model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.01),
    loss='binary_crossentropy',
    metrics=['accuracy']
)
# Step 7: Train the model
model.fit(X_train, y_train, epochs=100, verbose=1)

# Step 8: Evaluate model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")
________________________________________________________________________________________

task 2:

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Step 2: Load the dataset
df = pd.read_csv("players_selection.csv")
print(df.head())

# Step 3: Split dataset into features (X) and target (y)
X = df[['goals', 'fitness_level']].values
y = df['selected'].values

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build the model (Single Layer Perceptron with Hidden Layer)
model = Sequential()
model.add(Dense(5, input_dim=2, activation='relu'))  # Hidden layer with 5 neurons
model.add(Dense(1, activation='sigmoid'))  # Output layer

# Step 6: Compile the model
model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.01),
    loss='binary_crossentropy',
    metrics=['accuracy']
)
# Step 7: Train the model
model.fit(X_train, y_train, epochs=100, verbose=1)

# Step 8: Evaluate model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")
____________________________________________________________________________________________

task 3:

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Step 2: Load the dataset
df = pd.read_csv("players_selection.csv")
print(df.head())

# Step 3: Split dataset into features (X) and target (y)
X = df[['goals', 'fitness_level']].values
y = df['selected'].values

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build the model (Single Layer Perceptron with More Neurons)
model = Sequential()
model.add(Dense(10, input_dim=2, activation='relu'))  # Hidden layer with 10 neurons
model.add(Dense(1, activation='sigmoid'))  # Output layer

# Step 6: Compile the model
model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.01),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# Step 7: Train the model
model.fit(X_train, y_train, epochs=100, verbose=1)

# Step 8: Evaluate model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")
_______________________________________________________________________________________
task 4:

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import LambdaCallback

# Step 2: Load the dataset
df = pd.read_csv("players_selection.csv")
print(df.head())

# Step 3: Split dataset into features (X) and target (y)
X = df[['goals', 'fitness_level']].values
y = df['selected'].values

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build the model (Single Layer Perceptron with More Neurons)
model = Sequential()
model.add(Dense(10, input_dim=2, activation='relu'))  # Hidden layer with 10 neurons
model.add(Dense(1, activation='sigmoid'))  # Output layer

# Step 6: Compile the model
model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.01),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# Step 7: Create a callback to print training accuracy and predictions
def on_epoch_end(epoch, logs):
    train_accuracy = logs['accuracy']
    print(f"Epoch {epoch + 1}: Training Accuracy: {train_accuracy * 100:.2f}%")
    
    # Make predictions on the test data
    predictions = model.predict(X_test)
    predicted_classes = (predictions > 0.5).astype(int)
    print(f"Predictions on Test Data: {predicted_classes.flatten()}")

# Use LambdaCallback to print information at the end of each epoch
callback = LambdaCallback(on_epoch_end=on_epoch_end)

# Step 8: Train the model with the callback
model.fit(X_train, y_train, epochs=100, verbose=1, callbacks=[callback])

# Step 9: Evaluate model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")